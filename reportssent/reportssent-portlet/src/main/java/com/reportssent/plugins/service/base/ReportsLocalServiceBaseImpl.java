package com.reportssent.plugins.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.reportssent.plugins.model.Reports;
import com.reportssent.plugins.service.ReportsLocalService;
import com.reportssent.plugins.service.persistence.ReportsPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the reports local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.reportssent.plugins.service.impl.ReportsLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.reportssent.plugins.service.impl.ReportsLocalServiceImpl
 * @see com.reportssent.plugins.service.ReportsLocalServiceUtil
 * @generated
 */
public abstract class ReportsLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements ReportsLocalService, IdentifiableBean {
    @BeanReference(type = com.reportssent.plugins.service.ReportsLocalService.class)
    protected com.reportssent.plugins.service.ReportsLocalService reportsLocalService;
    @BeanReference(type = com.reportssent.plugins.service.ReportsService.class)
    protected com.reportssent.plugins.service.ReportsService reportsService;
    @BeanReference(type = ReportsPersistence.class)
    protected ReportsPersistence reportsPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private ReportsLocalServiceClpInvoker _clpInvoker = new ReportsLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.reportssent.plugins.service.ReportsLocalServiceUtil} to access the reports local service.
     */

    /**
     * Adds the reports to the database. Also notifies the appropriate model listeners.
     *
     * @param reports the reports
     * @return the reports that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Reports addReports(Reports reports) throws SystemException {
        reports.setNew(true);

        return reportsPersistence.update(reports);
    }

    /**
     * Creates a new reports with the primary key. Does not add the reports to the database.
     *
     * @param statusId the primary key for the new reports
     * @return the new reports
     */
    @Override
    public Reports createReports(long statusId) {
        return reportsPersistence.create(statusId);
    }

    /**
     * Deletes the reports with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param statusId the primary key of the reports
     * @return the reports that was removed
     * @throws PortalException if a reports with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Reports deleteReports(long statusId)
        throws PortalException, SystemException {
        return reportsPersistence.remove(statusId);
    }

    /**
     * Deletes the reports from the database. Also notifies the appropriate model listeners.
     *
     * @param reports the reports
     * @return the reports that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Reports deleteReports(Reports reports) throws SystemException {
        return reportsPersistence.remove(reports);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Reports.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return reportsPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reportssent.plugins.model.impl.ReportsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return reportsPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reportssent.plugins.model.impl.ReportsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return reportsPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return reportsPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return reportsPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Reports fetchReports(long statusId) throws SystemException {
        return reportsPersistence.fetchByPrimaryKey(statusId);
    }

    /**
     * Returns the reports with the matching UUID and company.
     *
     * @param uuid the reports's UUID
     * @param  companyId the primary key of the company
     * @return the matching reports, or <code>null</code> if a matching reports could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Reports fetchReportsByUuidAndCompanyId(String uuid, long companyId)
        throws SystemException {
        return reportsPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the reports matching the UUID and group.
     *
     * @param uuid the reports's UUID
     * @param groupId the primary key of the group
     * @return the matching reports, or <code>null</code> if a matching reports could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Reports fetchReportsByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return reportsPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the reports with the primary key.
     *
     * @param statusId the primary key of the reports
     * @return the reports
     * @throws PortalException if a reports with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Reports getReports(long statusId)
        throws PortalException, SystemException {
        return reportsPersistence.findByPrimaryKey(statusId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return reportsPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the reports with the matching UUID and company.
     *
     * @param uuid the reports's UUID
     * @param  companyId the primary key of the company
     * @return the matching reports
     * @throws PortalException if a matching reports could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Reports getReportsByUuidAndCompanyId(String uuid, long companyId)
        throws PortalException, SystemException {
        return reportsPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the reports matching the UUID and group.
     *
     * @param uuid the reports's UUID
     * @param groupId the primary key of the group
     * @return the matching reports
     * @throws PortalException if a matching reports could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Reports getReportsByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return reportsPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the reportses.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reportssent.plugins.model.impl.ReportsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of reportses
     * @param end the upper bound of the range of reportses (not inclusive)
     * @return the range of reportses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Reports> getReportses(int start, int end)
        throws SystemException {
        return reportsPersistence.findAll(start, end);
    }

    /**
     * Returns the number of reportses.
     *
     * @return the number of reportses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getReportsesCount() throws SystemException {
        return reportsPersistence.countAll();
    }

    /**
     * Updates the reports in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param reports the reports
     * @return the reports that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Reports updateReports(Reports reports) throws SystemException {
        return reportsPersistence.update(reports);
    }

    /**
     * Returns the reports local service.
     *
     * @return the reports local service
     */
    public com.reportssent.plugins.service.ReportsLocalService getReportsLocalService() {
        return reportsLocalService;
    }

    /**
     * Sets the reports local service.
     *
     * @param reportsLocalService the reports local service
     */
    public void setReportsLocalService(
        com.reportssent.plugins.service.ReportsLocalService reportsLocalService) {
        this.reportsLocalService = reportsLocalService;
    }

    /**
     * Returns the reports remote service.
     *
     * @return the reports remote service
     */
    public com.reportssent.plugins.service.ReportsService getReportsService() {
        return reportsService;
    }

    /**
     * Sets the reports remote service.
     *
     * @param reportsService the reports remote service
     */
    public void setReportsService(
        com.reportssent.plugins.service.ReportsService reportsService) {
        this.reportsService = reportsService;
    }

    /**
     * Returns the reports persistence.
     *
     * @return the reports persistence
     */
    public ReportsPersistence getReportsPersistence() {
        return reportsPersistence;
    }

    /**
     * Sets the reports persistence.
     *
     * @param reportsPersistence the reports persistence
     */
    public void setReportsPersistence(ReportsPersistence reportsPersistence) {
        this.reportsPersistence = reportsPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.reportssent.plugins.model.Reports",
            reportsLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.reportssent.plugins.model.Reports");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Reports.class;
    }

    protected String getModelClassName() {
        return Reports.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = reportsPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
