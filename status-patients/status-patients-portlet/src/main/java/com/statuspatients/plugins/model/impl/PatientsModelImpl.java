package com.statuspatients.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.statuspatients.plugins.model.Patients;
import com.statuspatients.plugins.model.PatientsModel;
import com.statuspatients.plugins.model.PatientsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Patients service. Represents a row in the &quot;OH_Patients&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.statuspatients.plugins.model.PatientsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatientsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PatientsImpl
 * @see com.statuspatients.plugins.model.Patients
 * @see com.statuspatients.plugins.model.PatientsModel
 * @generated
 */
@JSON(strict = true)
public class PatientsModelImpl extends BaseModelImpl<Patients>
    implements PatientsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a patients model instance should use the {@link com.statuspatients.plugins.model.Patients} interface instead.
     */
    public static final String TABLE_NAME = "OH_Patients";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "fooId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "field1", Types.VARCHAR },
            { "field2", Types.BOOLEAN },
            { "field3", Types.INTEGER },
            { "field4", Types.TIMESTAMP },
            { "field5", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table OH_Patients (uuid_ VARCHAR(75) null,fooId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table OH_Patients";
    public static final String ORDER_BY_JPQL = " ORDER BY patients.field1 ASC";
    public static final String ORDER_BY_SQL = " ORDER BY OH_Patients.field1 ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.statuspatients.plugins.model.Patients"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.statuspatients.plugins.model.Patients"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.statuspatients.plugins.model.Patients"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long FIELD2_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static long UUID_COLUMN_BITMASK = 8L;
    public static long FIELD1_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.statuspatients.plugins.model.Patients"));
    private static ClassLoader _classLoader = Patients.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Patients.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _fooId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _field1;
    private boolean _field2;
    private boolean _originalField2;
    private boolean _setOriginalField2;
    private int _field3;
    private Date _field4;
    private String _field5;
    private long _columnBitmask;
    private Patients _escapedModel;

    public PatientsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Patients toModel(PatientsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Patients model = new PatientsImpl();

        model.setUuid(soapModel.getUuid());
        model.setFooId(soapModel.getFooId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setField1(soapModel.getField1());
        model.setField2(soapModel.getField2());
        model.setField3(soapModel.getField3());
        model.setField4(soapModel.getField4());
        model.setField5(soapModel.getField5());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Patients> toModels(PatientsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Patients> models = new ArrayList<Patients>(soapModels.length);

        for (PatientsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _fooId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFooId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fooId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Patients.class;
    }

    @Override
    public String getModelClassName() {
        return Patients.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("fooId", getFooId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("field1", getField1());
        attributes.put("field2", getField2());
        attributes.put("field3", getField3());
        attributes.put("field4", getField4());
        attributes.put("field5", getField5());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long fooId = (Long) attributes.get("fooId");

        if (fooId != null) {
            setFooId(fooId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String field1 = (String) attributes.get("field1");

        if (field1 != null) {
            setField1(field1);
        }

        Boolean field2 = (Boolean) attributes.get("field2");

        if (field2 != null) {
            setField2(field2);
        }

        Integer field3 = (Integer) attributes.get("field3");

        if (field3 != null) {
            setField3(field3);
        }

        Date field4 = (Date) attributes.get("field4");

        if (field4 != null) {
            setField4(field4);
        }

        String field5 = (String) attributes.get("field5");

        if (field5 != null) {
            setField5(field5);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getFooId() {
        return _fooId;
    }

    @Override
    public void setFooId(long fooId) {
        _fooId = fooId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getField1() {
        if (_field1 == null) {
            return StringPool.BLANK;
        } else {
            return _field1;
        }
    }

    @Override
    public void setField1(String field1) {
        _columnBitmask = -1L;

        _field1 = field1;
    }

    @JSON
    @Override
    public boolean getField2() {
        return _field2;
    }

    @Override
    public boolean isField2() {
        return _field2;
    }

    @Override
    public void setField2(boolean field2) {
        _columnBitmask |= FIELD2_COLUMN_BITMASK;

        if (!_setOriginalField2) {
            _setOriginalField2 = true;

            _originalField2 = _field2;
        }

        _field2 = field2;
    }

    public boolean getOriginalField2() {
        return _originalField2;
    }

    @JSON
    @Override
    public int getField3() {
        return _field3;
    }

    @Override
    public void setField3(int field3) {
        _field3 = field3;
    }

    @JSON
    @Override
    public Date getField4() {
        return _field4;
    }

    @Override
    public void setField4(Date field4) {
        _field4 = field4;
    }

    @JSON
    @Override
    public String getField5() {
        if (_field5 == null) {
            return StringPool.BLANK;
        } else {
            return _field5;
        }
    }

    @Override
    public void setField5(String field5) {
        _field5 = field5;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                Patients.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Patients.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Patients toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Patients) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PatientsImpl patientsImpl = new PatientsImpl();

        patientsImpl.setUuid(getUuid());
        patientsImpl.setFooId(getFooId());
        patientsImpl.setGroupId(getGroupId());
        patientsImpl.setCompanyId(getCompanyId());
        patientsImpl.setUserId(getUserId());
        patientsImpl.setUserName(getUserName());
        patientsImpl.setCreateDate(getCreateDate());
        patientsImpl.setModifiedDate(getModifiedDate());
        patientsImpl.setField1(getField1());
        patientsImpl.setField2(getField2());
        patientsImpl.setField3(getField3());
        patientsImpl.setField4(getField4());
        patientsImpl.setField5(getField5());

        patientsImpl.resetOriginalValues();

        return patientsImpl;
    }

    @Override
    public int compareTo(Patients patients) {
        int value = 0;

        value = getField1().compareTo(patients.getField1());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Patients)) {
            return false;
        }

        Patients patients = (Patients) obj;

        long primaryKey = patients.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PatientsModelImpl patientsModelImpl = this;

        patientsModelImpl._originalUuid = patientsModelImpl._uuid;

        patientsModelImpl._originalGroupId = patientsModelImpl._groupId;

        patientsModelImpl._setOriginalGroupId = false;

        patientsModelImpl._originalCompanyId = patientsModelImpl._companyId;

        patientsModelImpl._setOriginalCompanyId = false;

        patientsModelImpl._originalField2 = patientsModelImpl._field2;

        patientsModelImpl._setOriginalField2 = false;

        patientsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Patients> toCacheModel() {
        PatientsCacheModel patientsCacheModel = new PatientsCacheModel();

        patientsCacheModel.uuid = getUuid();

        String uuid = patientsCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            patientsCacheModel.uuid = null;
        }

        patientsCacheModel.fooId = getFooId();

        patientsCacheModel.groupId = getGroupId();

        patientsCacheModel.companyId = getCompanyId();

        patientsCacheModel.userId = getUserId();

        patientsCacheModel.userName = getUserName();

        String userName = patientsCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            patientsCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            patientsCacheModel.createDate = createDate.getTime();
        } else {
            patientsCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            patientsCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            patientsCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        patientsCacheModel.field1 = getField1();

        String field1 = patientsCacheModel.field1;

        if ((field1 != null) && (field1.length() == 0)) {
            patientsCacheModel.field1 = null;
        }

        patientsCacheModel.field2 = getField2();

        patientsCacheModel.field3 = getField3();

        Date field4 = getField4();

        if (field4 != null) {
            patientsCacheModel.field4 = field4.getTime();
        } else {
            patientsCacheModel.field4 = Long.MIN_VALUE;
        }

        patientsCacheModel.field5 = getField5();

        String field5 = patientsCacheModel.field5;

        if ((field5 != null) && (field5.length() == 0)) {
            patientsCacheModel.field5 = null;
        }

        return patientsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", fooId=");
        sb.append(getFooId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", field1=");
        sb.append(getField1());
        sb.append(", field2=");
        sb.append(getField2());
        sb.append(", field3=");
        sb.append(getField3());
        sb.append(", field4=");
        sb.append(getField4());
        sb.append(", field5=");
        sb.append(getField5());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.statuspatients.plugins.model.Patients");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fooId</column-name><column-value><![CDATA[");
        sb.append(getFooId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>field1</column-name><column-value><![CDATA[");
        sb.append(getField1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>field2</column-name><column-value><![CDATA[");
        sb.append(getField2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>field3</column-name><column-value><![CDATA[");
        sb.append(getField3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>field4</column-name><column-value><![CDATA[");
        sb.append(getField4());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>field5</column-name><column-value><![CDATA[");
        sb.append(getField5());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
